[["index.html", "Riskvatten Introduktion/bakgrund", " Riskvatten Carl Tamario 2024-10-14 Introduktion/bakgrund Det här är arbetsutkastet för projektet Riskvatten som innehåller sex arbetspaket. "],["wp1-fish-species-and-vulnerable-populations.html", "Chapter 1 WP1: Fish species and vulnerable populations 1.1 Background 1.2 Att göra 1.3 SERS Elfiskeregistret 1.4 NORS Sjöfiskeregistret", " Chapter 1 WP1: Fish species and vulnerable populations 1.1 Background “we will identify relevant and target species within each watercourse. This will be done by the combination of information from the electro fishing database (SERS), the test fishing database (NORS), as well as the Species observation system database (Artportalen), all available at SLU. In addition, the County Boards will be consulted about the fish fauna in their respective counties. When a comprehensive understanding about the fish fauna in the different watercourses has been produced, additional information about vulnerability of different species/populations will be added as an additional datasheet.” 1.2 Att göra Jag vill nu göra ett lager med förekomst av öring, men inte endast utifrån “punkter på en karta”, utan utifrån fragment där öring bör finnas. Dessa fragment skapar jag utifrån ett lager med alla vandringshinder. library(pacman) p_load(tidyr, dplyr, sf, rgbif, ggplot2, stringr, leaflet, haven) 1.3 SERS Elfiskeregistret Ladda in rådata och gör en ren fil med endast platsangivelse (i flera koordinatsystem) och närvaro/saknad (presence/absenc) för alla arter som är påträffade i elfiskeregistret. Här nedan kör vi bara på elfiskeregistret. # Read the SPSS .sav file into a data frame df_sers_all &lt;- read_sav(&quot;D:/rawdata/SAMMANFO_TOT1_VIX_MORF-2022_calle.SAV&quot;) # Replace all occurrences of -9 in the data frame with NA (missing values) df_sers_all2 &lt;- df_sers_all %&gt;% dplyr::mutate(across(everything(), ~ifelse(. == -9, NA, .))) # Set df as the cleaned data frame df &lt;- df_sers_all2 # Create a base data frame by selecting specific columns from df basefile &lt;- df %&gt;% select(XKOORLOK, YKOORLOK, vdragnam, s99tm_n, s99tm_e, ddlat, ddlong, ARTANTAL)# %&gt;% summarise(Öring_present = ceiling(mean(Öring0 + Öring)/10000)) # Extract species-related columns from df based on column names that contain &quot;KLAS&quot; df_species &lt;- df[,which(str_detect(names(df), &quot;KLAS&quot;))] # Read a CSV file containing species information sp_list &lt;- read.csv(&quot;C:/Users/caio0001/Documents/git/riskvatten/data/Artlista_SERS.csv&quot;, sep = &quot;;&quot;, fileEncoding = &quot;Latin1&quot;) # Rename columns in df_species to Swedish species names from sp_list names(df_species) &lt;- sp_list$Sp_SWE # Filter df_species to only include columns where is_species is 1 (indicating a valid species) df_species2 &lt;- df_species[,sp_list$is_species == 1] # Combine the basefile and the filtered species data df2 &lt;- cbind(basefile, df_species2) # Create a new column that lists names of present species df2$species_names &lt;- apply(df2[,seq(from=ncol(basefile)+1, to=ncol(df2), by=1)], 1, function(x) { # Join names of columns with 1s into a single string, separated by commas paste(names(df2[,seq(from=ncol(basefile)+1, to=ncol(df2), by=1)])[which(x == 1)], collapse = &quot;, &quot;) }) # Group the data by site and merge unique species names and their counts df3 &lt;- df2 %&gt;% group_by(XKOORLOK, YKOORLOK, vdragnam, s99tm_n, s99tm_e, ddlat, ddlong) %&gt;% summarize( # Concatenate unique species names into a single string all_sp = str_c(unique(unlist(str_split(species_names, &quot;, &quot;))[nzchar(unique(unlist(str_split(species_names, &quot;, &quot;))))]), collapse = &quot;, &quot;), # Count the number of unique species names no_sp = length(unique(unlist(str_split(species_names, &quot;, &quot;))[nzchar(unique(unlist(str_split(species_names, &quot;, &quot;))))]))) ## `summarise()` has grouped output by &#39;XKOORLOK&#39;, &#39;YKOORLOK&#39;, &#39;vdragnam&#39;, &#39;s99tm_n&#39;, &#39;s99tm_e&#39;, &#39;ddlat&#39;. You can override using ## the `.groups` argument. df3 ## # A tibble: 21,437 × 9 ## # Groups: XKOORLOK, YKOORLOK, vdragnam, s99tm_n, s99tm_e, ddlat [21,437] ## XKOORLOK YKOORLOK vdragnam s99tm_n s99tm_e ddlat ddlong all_sp no_sp ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 613826 134663 Sänkebäck 6134957 397743 55.4 13.4 Småsp… 7 ## 2 613967 133652 Bäck vid Gislövs… 6136249 387623 55.4 13.2 Småsp… 2 ## 3 614032 133490 Dalköpingeån 6136880 385996 55.4 13.2 Småsp… 5 ## 4 614041 133498 Dalköpingeån 6136971 386075 55.4 13.2 Småsp… 2 ## 5 614046 133504 Dalköpingeån 6137022 386135 55.4 13.2 Småsp… 2 ## 6 614088 135105 Bäck 2 km V Skat… 6137627 402130 55.4 13.5 Småsp… 1 ## 7 614096 139489 Tyge å 6138214 445942 55.4 14.1 Ål 1 ## 8 614136 135264 Tullstorpsån 6138125 403713 55.4 13.5 Småsp… 3 ## 9 614160 133541 Dalköpingeån 6138165 386491 55.4 13.2 Småsp… 1 ## 10 614170 134900 Tullstorpsån 6138422 400071 55.4 13.4 Ål, S… 5 ## # ℹ 21,427 more rows # Below I was decoding which KLASS column corresponds to which density column # Saving it for reference sake. # table(df$SANKLASS, df$Sankr) # table(df$REKLASS, df$Regnb0+df$Regnb) # table(df$HOKLASS, df$Hosim) # # table(df$FLKLASS, df$Flone) # table(df$BNKLASS, df$Bäcne) # # table(df$BRXÖKLAS, df$Bäcröxör) # # table(df$STEKLASS, df$Stesi) # table(df$BSKLASS, df$Besim) # # table(df$FKKLASS, df$Flodkräf) # table(df$SKKLASS, df$Signkräf) # table(df$HNKLASS, df$Havne) # # table(df$SANKLASS, df$Sankr) # table(df$SBKLASS, df$Skrub) # table(df$SSKLASS, df$Sanst) # table(df$SAKLASS, df$Sarv) # # table(df$SMSKLASS, df$Smsmörb) # table(df$KRÄKLASS) # table(df$SPKLASS) #Still unclear! Testa att plotta detta sf_points &lt;- st_as_sf(df3, coords = c(&quot;ddlong&quot;, &quot;ddlat&quot;), crs = 4326) # WGS84 leaflet() %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% addCircleMarkers(data = sf_points, radius = ~ no_sp, stroke = F, color = &quot;red&quot;, popup = ~ paste(all_sp)) 1.4 NORS Sjöfiskeregistret library(httr) library(jsonlite) ### Step 1: Fetch all HAROs in the database url &lt;- &quot;https://dvfisk.slu.se/api/V1/nors/data-aggregerad/huvudavrinningsomraden&quot; response &lt;- GET(url) response_content &lt;- content(response, as = &quot;text&quot;) data &lt;- fromJSON(response_content) # A vector containing all the HAROs haros &lt;- data$haroNr ################ ################ ### Step 2: Extracting data from NORS # API URL url &lt;- &quot;https://dvfisk.slu.se/api/V1/nors/data-aggregerad/rapport&quot; ## Creating the first dataframe to prepare for looping over all HAROs # initiate the parameter with the first HARO with samples params &lt;- list(HaroNr = haros[2]) # Make the GET request response &lt;- GET(url, query = params) NORS_extract &lt;- fromJSON(content(response, &quot;text&quot;)) ## Loop over all HAROs to extract data for all lakes in Sweden for(i in 3:length(haros)){ # Looping over HARO params &lt;- list(HaroNr = haros[i]) # Make the GET request response &lt;- GET(url, query = params) if (status_code(response) == 200) { # Extract content as text new_content &lt;- fromJSON(content(response, &quot;text&quot;)) # Print the content #print(content) } else { # Print an error message if the request failed print(paste(&quot;Request failed with status code:&quot;, status_code(response))) } if(nrow(new_content &gt; 0)){ NORS_extract &lt;- rbind(NORS_extract, new_content) } } head(NORS_extract) ## län haroNr haro nationelltÖvervakningsstationsID ## 1 Stockholm 4 Ålands hav (öar) 197352 ## 2 Stockholm 4 Ålands hav (öar) 261496 ## 3 Stockholm 4 Ålands hav (öar) 261499 ## 4 Norrbotten 1000 Torneälven 183960 ## 5 Norrbotten 1000 Torneälven 183969 ## 6 Norrbotten 1000 Torneälven 184389 ## eU_CD sjö lokal sweref99N ## 1 NW658085-163802 658115-163797 Glasbrukssjön Hela sjön 6581095 ## 2 NW658256-164383 658335-164347 Insjön Hela sjön 6583361 ## 3 NW658181-165289 658198-165237 Hemmestaträsket Hela sjön 6582099 ## 4 SE749639-182451 749639-182451 Kaunisjärvi Hela sjön 7498462 ## 5 NW753760-167994 753768-168017 Unna Soahkejavrras Hela sjön 7537737 ## 6 NW749497-178699 749497-178699 Isojärvi Hela sjön 7496593 ## sweref99E area maxDjup höH antalFisken ## 1 683704 7 13 11 1 ## 2 689175 45 12 1 1 ## 3 698089 13 2 2 1 ## 4 858678 67 5 160 6 ## 5 713877 9 8 504 2 ## 6 821165 59 9 219 1 ## fångadeArter förstaFiskeår ## 1 Abborre,Benlöja,Gers,Mört 2015 ## 2 Abborre,Benlöja,Björkna,Braxen,Gers,Gädda,Mört,Sarv,Sutare 2014 ## 3 Abborre,Benlöja,Björkna,Braxen,Gers,Gädda,Mört,Nors,Ruda,Sarv 2019 ## 4 Abborre,Gädda,Mört 1964 ## 5 Gädda 2015 ## 6 Abborre,Lake,Sik 1965 ## senasteFiskeår allaFiskeår allaEQR8 senasteMetod bNätTyp ## 1 2015 2015 0.40 Stand Bnord12 ## 2 2014 2014 0.46 Stand Bnord12 ## 3 2019 2019 Inven Bnord12 ## 4 2022 1964,2014,2015,2018,2019,2022 Inven Bnord12 ## 5 2021 2015,2021 0.44 Stand Bnord12 ## 6 1965 1965 Oklas Blänk ## npueTot wpueTot vanlArt vanlArtWProc nästVanlArt nästVanlArtWProc eqR8 ## 1 21.88 1390.63 Abborre 77.6 Mört 21.6 0,40 (M) ## 2 110.13 2534.94 Abborre 47.5 Mört 24.5 0,46 (M) ## 3 185.86 3960.00 Braxen 35.4 Mört 17.8 ## 4 232.25 8613.26 Mört 41.8 Abborre 40.9 ## 5 2.00 667.00 Gädda 100.0 0.0 0,44 (M) ## 6 3.78 344.44 Abborre 62.6 Lake 30.6 ## aindexW5 eindexW3 nMört_100 nMört101_110 nMört111_120 nMört121_130 ## 1 0,18 (O) 0,89 (H) 2 0 0 1 ## 2 0,50 (H) 0,31 (G) 21 1 1 9 ## 3 125 23 16 10 ## 4 210 50 29 15 ## 5 0,39 (H) 0,52 (H) 0 0 0 0 ## 6 0 0 0 0 ## nMört131_140 nMört141_150 npue_3 npue3_6 npue6_12 npue12_20 npue20_35 ## 1 2 4 37.33 21.0 0.0 0 0 ## 2 28 53 114.20 174.5 28.8 0 0 ## 3 9 5 185.86 0.0 0.0 0 0 ## 4 21 33 232.25 0.0 0.0 0 0 ## 5 0 0 1.86 3.0 0.0 0 0 ## 6 0 0 0.00 0.0 0.0 0 0 ## npue35_50 npue50_75 npue75_ ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## url ## 1 http://aquarapport.slu.se/default.aspx?ID=99&amp;X=6581150&amp;Y=1637970 ## 2 http://aquarapport.slu.se/default.aspx?ID=99&amp;X=6583350&amp;Y=1643470 ## 3 http://aquarapport.slu.se/default.aspx?ID=99&amp;X=6581980&amp;Y=1652370 ## 4 http://aquarapport.slu.se/default.aspx?ID=99&amp;X=7496390&amp;Y=1824510 ## 5 http://aquarapport.slu.se/default.aspx?ID=99&amp;X=7537680&amp;Y=1680170 ## 6 http://aquarapport.slu.se/default.aspx?ID=99&amp;X=7494970&amp;Y=1786990 "],["koppla-samman-till-vattenförekomster.html", "Chapter 2 Koppla samman till vattenförekomster", " Chapter 2 Koppla samman till vattenförekomster Ladda nu även in vattendragsdata. Leaflet verkar så segt. Jag kan inte ladda en leaflet med alla vattendrag, och jag lyckas heller inte göra en lösning som bara renderar vattendragslinjer under vissa zoom-omständigheter. Jag tror att det som jag måste göra är att jobba i GIS och skapa statiska kartbilder. Drömmen om interaktiva kartor kanske måste dö. "],["wp2-chemical-pollution.html", "Chapter 3 WP2: Chemical pollution 3.1 Background", " Chapter 3 WP2: Chemical pollution 3.1 Background Hej "],["wp3-fish-health-relevant-diseases-and-syndromes.html", "Chapter 4 WP3: Fish health (relevant diseases and syndromes) 4.1 Background", " Chapter 4 WP3: Fish health (relevant diseases and syndromes) 4.1 Background "],["wp4-hydropower-activities.html", "Chapter 5 WP4: Hydropower activities 5.1 Background", " Chapter 5 WP4: Hydropower activities 5.1 Background Hej "],["wp5-invasive-species.html", "Chapter 6 WP5: Invasive species 6.1 Background", " Chapter 6 WP5: Invasive species 6.1 Background Hej "],["wp6-overall-risk-assessment.html", "Chapter 7 WP6: Overall risk assessment 7.1 Background", " Chapter 7 WP6: Overall risk assessment 7.1 Background Hej "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
